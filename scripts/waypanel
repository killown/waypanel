#!/usr/bin/env bash
set -e

# Kill existing instance
pkill -f waypanel/main.py || true

APP_NAME="waypanel"
VENV_DIR="$HOME/.local/share/$APP_NAME/venv"

# Use the script's own location to find relative paths
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
PROJECT_ROOT="$SCRIPT_DIR/.."

# The system path function you requested.
find_package_files() {
  local candidate_paths=(
    "$HOME/.local/lib/python3*/site-packages/$APP_NAME"
    "/usr/lib/python3*/dist-packages/$APP_NAME"
    "/usr/lib/python3*/site-packages/$APP_NAME"
    "/usr/local/lib/python3*/dist-packages/$APP_NAME"
    "/usr/local/lib/python3*/site-packages/$APP_NAME"
  )

  for path in "${candidate_paths[@]}"; do
    if [ -d "$path" ]; then
      MAIN_PY="$path/main.py"
      REQ_FILE="$path/requirements.txt"
      if [ -f "$MAIN_PY" ]; then
        echo "$path"
        return 0
      fi
    fi
  done
  return 1
}

# Find the installed package path or use the development path
INSTALLED_PATH=$(find_package_files) || true
if [ -n "$INSTALLED_PATH" ]; then
  MAIN_PY="$INSTALLED_PATH/main.py"
  REQ_FILE="$INSTALLED_PATH/requirements.txt"
  CONFIG_SRC="$INSTALLED_PATH/config"
  export PYTHONPATH="$INSTALLED_PATH"
  echo "[INFO] Using installed package from: $INSTALLED_PATH"
else
  # Fallback to the original development paths
  MAIN_PY="$PROJECT_ROOT/waypanel/main.py"
  REQ_FILE="$PROJECT_ROOT/requirements.txt"
  CONFIG_SRC="$PROJECT_ROOT/waypanel/config"
  export PYTHONPATH="$PROJECT_ROOT"
  echo "[INFO] Using development path: $PROJECT_ROOT"
fi

# ===== GTK4 Layer Shell library detection =====
GTK_LIB=""

# Function to find GTK4 Layer Shell library
find_gtk_layer_shell() {
  # Common system + local paths
  local candidate_libs=(
    "/usr/lib/libgtk4-layer-shell.so"
    "/usr/lib/x86_64-linux-gnu/libgtk4-layer-shell.so"
    "/usr/lib64/libgtk4-layer-shell.so"
    "$HOME/.local/lib/gtk4-layer-shell/lib/libgtk4-layer-shell.so"
  )

  # Check candidate paths
  for lib in "${candidate_libs[@]}"; do
    if [ -f "$lib" ]; then
      echo "$lib"
      return 0
    fi
  done

  return 1
}

GTK_LIB=$(find_gtk_layer_shell) || true

if [ -z "$GTK_LIB" ]; then
  echo "[ERROR] libgtk4-layer-shell.so not found."
  echo "Install it system-wide, locally, or via a package manager."
  exit 1
fi

export LD_PRELOAD="$GTK_LIB"
echo "[INFO] Using GTK4 Layer Shell: $GTK_LIB"

# ===== Config setup =====
CONFIG_DIR="$HOME/.config/$APP_NAME"
CONFIG_FILE="$CONFIG_DIR/config.toml"
SYSTEM_CONFIG="/usr/lib/$APP_NAME/config"
LOCAL_DEV_CONFIG="$SCRIPT_DIR/waypanel/config"
ALT_DEV_CONFIG="$SCRIPT_DIR/config"

if [ ! -f "$CONFIG_FILE" ]; then
  echo "[INFO] Config not found at $CONFIG_FILE. Attempting to copy defaults..."

  # Try different config sources in order of preference
  if [ -d "$SYSTEM_CONFIG" ]; then
    mkdir -p "$CONFIG_DIR"
    cp -r "$SYSTEM_CONFIG"/* "$CONFIG_DIR/"
    echo "[INFO] Default config copied from system: $SYSTEM_CONFIG"
  elif [ -d "$LOCAL_DEV_CONFIG" ]; then
    mkdir -p "$CONFIG_DIR"
    cp -r "$LOCAL_DEV_CONFIG"/* "$CONFIG_DIR/"
    echo "[INFO] Default config copied from dev path: $LOCAL_DEV_CONFIG"
  elif [ -d "$ALT_DEV_CONFIG" ]; then
    mkdir -p "$CONFIG_DIR"
    cp -r "$ALT_DEV_CONFIG"/* "$CONFIG_DIR/"
    echo "[INFO] Default config copied from alt dev path: $ALT_DEV_CONFIG"
  else
    echo "[ERROR] No default config found." >&2
    exit 1
  fi
fi

# ===== Virtual environment setup =====
if [ ! -d "$VENV_DIR" ]; then
  echo "[INFO] Creating virtual environment..."
  mkdir -p "$VENV_DIR"
  python3 -m venv --system-site-packages "$VENV_DIR"
fi

source "$VENV_DIR/bin/activate"

# Check if we need to install dependencies
if { [ ! -f "$VENV_DIR/.requirements_installed" ] || [ "$REQ_FILE" -nt "$VENV_DIR/.requirements_installed" ]; }; then
  echo "[INFO] Installing dependencies..."
  pip install --no-cache-dir -r "$REQ_FILE"
  touch "$VENV_DIR/.requirements_installed"
fi

# ===== Run the app =====
exec python "$MAIN_PY" "$@"
